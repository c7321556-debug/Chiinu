name: RDP

on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    # Set timeout for long-running connection (360 minutes = 6 hours)
    timeout-minutes: 360

    steps:
      - name: Configure Core RDP Settings
        run: |
          # Enable Remote Desktop and disable Network Level Authentication (NLA)
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' `
                             -Name "fDenyTSConnections" -Value 0 -Force
          # Disable NLA for broader client compatibility (Value 0 means RDP is allowed without NLA)
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                             -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                             -Name "SecurityLayer" -Value 0 -Force

          # Remove existing firewall rule and add a new one to allow RDP (port 3389)
          netsh advfirewall firewall delete rule name="RDP-Tailscale"
          netsh advfirewall firewall add rule name="RDP-Tailscale" `
            dir=in action=allow protocol=TCP localport=3389

          # Restart the Remote Desktop service
          Restart-Service -Name TermService -Force

      - name: Create RDP User with Static Password from Secret
        # The 'RDP_STATIC_PASSWORD' secret must be created in your repository settings
        env:
          STATIC_PASS: ${{ secrets.RDP_STATIC_PASSWORD }}
        run: |
          Write-Host "Attempting to create/update user 'RDP' with static password using net user..."
          
          # Check if user exists (net user returns exit code 0 if user exists, 2 if not)
          # We check the exit code by piping output to Out-Null
          net user RDP 2>&1 | Out-Null
          $user_exists = $LASTEXITCODE -eq 0

          if ($user_exists) {
              Write-Host "User 'RDP' exists. Setting new password."
              # Set password for existing user using net user
              net user RDP $env:STATIC_PASS
          } else {
              Write-Host "Creating new user 'RDP'."
              # Create user and set password using net user
              net user RDP $env:STATIC_PASS /add
          }
          
          # Ensure account never expires and is active
          net user RDP /expires:never /active:yes
          
          # Add user to Administrators and Remote Desktop Users groups using net localgroup
          Write-Host "Adding 'RDP' user to necessary groups..."
          net localgroup Administrators RDP /add
          net localgroup "Remote Desktop Users" RDP /add
          
          # Check for final success
          if (-not (Get-LocalUser -Name "RDP" -ErrorAction SilentlyContinue)) {
              Write-Error "User creation or password reset failed"
              exit 1
          }

      - name: Install Tailscale
        run: |
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
          $installerPath = "$env:TEMP\tailscale.msi"
          
          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
          Remove-Item $installerPath -Force

      - name: Establish Tailscale Connection
        run: |
          # Bring up Tailscale with the provided auth key and set a unique hostname
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=gh-runner-$env:GITHUB_RUN_ID
          
          # Wait for Tailscale to assign an IP
          $tsIP = $null
          $retries = 0
          while (-not $tsIP -and $retries -lt 10) {
              Write-Host "Waiting for Tailscale IP... attempt $($retries + 1)"
              $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
              Start-Sleep -Seconds 5
              $retries++
          }
          
          if (-not $tsIP) {
              Write-Error "Tailscale IP not assigned. Exiting."
              exit 1
          }
          # Export IP for next step
          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV
          
      - name: Verify RDP Accessibility
        run: |
          Write-Host "Tailscale IP: $env:TAILSCALE_IP"
          
          # Test connectivity using Test-NetConnection
          $testResult = Test-NetConnection -ComputerName $env:TAILSCALE_IP -Port 3389
          if (-not $testResult.TcpTestSucceeded) {
              Write-Error "TCP connection to RDP port 3389 failed"
              exit 1
          }
          Write-Host "TCP connectivity successful!"

      - name: Maintain Connection
        run: |
          Write-Host "`n=== RDP ACCESS INFORMATION ==="
          Write-Host "Address: $env:TAILSCALE_IP"
          Write-Host "Username: RDP"
          Write-Host "Password: (The password is the value stored in the RDP_STATIC_PASSWORD GitHub Secret)"
          Write-Host "==============================`n"
          
          # Keep runner active indefinitely (or until manually cancelled)
          while ($true) {
              Write-Host "[$(Get-Date)] RDP Active - Use Ctrl+C in workflow to terminate"
              Start-Sleep -Seconds 300
          }
